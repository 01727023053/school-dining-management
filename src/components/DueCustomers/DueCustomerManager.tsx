import React, { useState } from 'react';
import { Plus, Search, Users, Phone, Calendar, AlertTriangle, Edit, Eye, Trash2, MessageSquare, DollarSign } from 'lucide-react';
import { useData } from '../../contexts/DataContext';
import { useNavigate } from 'react-router-dom';
import { format } from 'date-fns';
import DueCustomerForm from './DueCustomerForm';
import DueCustomerDetails from './DueCustomerDetails';
import toast from 'react-hot-toast';

const DueCustomerManager: React.FC = () => {
  const { dueCustomers } = useData();
  const navigate = useNavigate();
  const [showForm, setShowForm] = useState(false);
  const [selectedCustomer, setSelectedCustomer] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterOverdue, setFilterOverdue] = useState<boolean | null>(null);

  const filteredCustomers = dueCustomers.filter(customer => {
    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         customer.phone.includes(searchTerm);
    
    const isOverdue = new Date(customer.dueDate) < new Date();
    const matchesFilter = filterOverdue === null || 
                         (filterOverdue === true && isOverdue) ||
                         (filterOverdue === false && !isOverdue);
    
    return matchesSearch && matchesFilter;
  });

  const totalDue = dueCustomers.reduce((sum, c) => sum + c.totalDue, 0);
  const overdueCustomers = dueCustomers.filter(c => new Date(c.dueDate) < new Date());
  const totalOverdue = overdueCustomers.reduce((sum, c) => sum + c.totalDue, 0);
  const remindersSent = dueCustomers.filter(c => c.reminderSent).length;

  const sendReminder = (customerId: string) => {
    // In a real app, this would send SMS/email
    toast.success('‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
  };

  const sendReminderToAll = () => {
    // Send reminder to all customers with due amounts
    const customersWithDue = dueCustomers.filter(c => c.totalDue > 0);
    if (customersWithDue.length === 0) {
      toast.error('‡¶ï‡ßã‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶®‡ßá‡¶á');
      return;
    }
    toast.success(`${customersWithDue.length} ‡¶ú‡¶® ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
  };

  const showOverdueList = () => {
    setFilterOverdue(true);
    toast(`${overdueCustomers.length} ‡¶ú‡¶® ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá`);
  };

  const generateMonthlyReport = () => {
    navigate('/reports');
    toast.success('‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá');
  };

  const getDaysOverdue = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = today.getTime() - due.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800 font-bengali">‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ</h1>
        <button
          onClick={() => setShowForm(true)}
          className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="w-4 h-4" />
          <span className="font-bengali">‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï</span>
        </button>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <Users className="w-8 h-8 text-blue-500" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 font-bengali">‡¶Æ‡ßã‡¶ü ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï</p>
              <p className="text-2xl font-bold text-gray-900">{dueCustomers.length}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <DollarSign className="w-8 h-8 text-red-500" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 font-bengali">‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ</p>
              <p className="text-2xl font-bold text-red-600">‡ß≥{totalDue}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <AlertTriangle className="w-8 h-8 text-orange-500" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 font-bengali">‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£</p>
              <p className="text-2xl font-bold text-orange-600">{overdueCustomers.length}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <MessageSquare className="w-8 h-8 text-green-500" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 font-bengali">‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã</p>
              <p className="text-2xl font-bold text-green-600">{remindersSent}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Overdue Alert */}
      {overdueCustomers.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <AlertTriangle className="w-5 h-5 text-red-500" />
            <h3 className="ml-2 text-lg font-semibold text-red-800 font-bengali">
              ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ
            </h3>
          </div>
          <p className="mt-2 text-red-700 font-bengali">
            {overdueCustomers.length} ‡¶ú‡¶® ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Æ‡ßã‡¶ü ‡ß≥{totalOverdue} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§
          </p>
          <div className="mt-3 space-y-1">
            {overdueCustomers.slice(0, 3).map(customer => (
              <div key={customer.id} className="flex justify-between text-sm">
                <span className="font-bengali">
                  {customer.name} ({getDaysOverdue(customer.dueDate)} ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§)
                </span>
                <span className="font-semibold text-red-600">‡ß≥{customer.totalDue}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Quick Actions */}
      <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-lg p-6 border border-orange-200">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 font-bengali">‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡¶æ‡¶ú</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button 
            onClick={sendReminderToAll}
            className="bg-white rounded-lg p-4 border border-orange-200 hover:bg-orange-50 transition-colors"
          >
            <div className="text-center">
              <div className="text-2xl mb-2">üìû</div>
              <h4 className="font-medium text-gray-800 font-bengali">‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞</h4>
              <p className="text-sm text-gray-600 font-bengali">‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®</p>
            </div>
          </button>

          <button 
            onClick={showOverdueList}
            className="bg-white rounded-lg p-4 border border-red-200 hover:bg-red-50 transition-colors"
          >
            <div className="text-center">
              <div className="text-2xl mb-2">‚ö†Ô∏è</div>
              <h4 className="font-medium text-gray-800 font-bengali">‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ</h4>
              <p className="text-sm text-gray-600 font-bengali">‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</p>
            </div>
          </button>

          <button 
            onClick={generateMonthlyReport}
            className="bg-white rounded-lg p-4 border border-green-200 hover:bg-green-50 transition-colors"
          >
            <div className="text-center">
              <div className="text-2xl mb-2">üìä</div>
              <h4 className="font-medium text-gray-800 font-bengali">‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü</h4>
              <p className="text-sm text-gray-600 font-bengali">‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡¶ø‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü</p>
            </div>
          </button>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          <select
            value={filterOverdue === null ? 'all' : filterOverdue ? 'overdue' : 'current'}
            onChange={(e) => {
              const value = e.target.value;
              setFilterOverdue(value === 'all' ? null : value === 'overdue');
            }}
            className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï</option>
            <option value="overdue">‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßã‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£</option>
            <option value="current">‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®</option>
          </select>

          <button 
            onClick={sendReminderToAll}
            className="flex items-center justify-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
          >
            <MessageSquare className="w-4 h-4" />
            <span className="font-bengali">‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡¶ï‡ßá SMS</span>
          </button>
        </div>
      </div>

      {/* Customers Table */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶´‡ßã‡¶®
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶ú‡¶Æ‡¶æ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider font-bengali">
                  ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredCustomers.length > 0 ? filteredCustomers.map((customer) => {
                const isOverdue = new Date(customer.dueDate) < new Date();
                const daysOverdue = getDaysOverdue(customer.dueDate);
                
                return (
                  <tr key={customer.id} className={`hover:bg-gray-50 ${isOverdue ? 'bg-red-50' : ''}`}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                          isOverdue ? 'bg-red-100' : 'bg-blue-100'
                        }`}>
                          <span className={`text-sm font-medium ${
                            isOverdue ? 'text-red-600' : 'text-blue-600'
                          }`}>
                            {customer.name.charAt(0)}
                          </span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900 font-bengali">{customer.name}</div>
                          {customer.reminderSent && (
                            <div className="text-xs text-green-600 font-bengali">‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã</div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <Phone className="w-4 h-4 text-gray-400 mr-2" />
                        <span className="text-sm text-gray-900">{customer.phone}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-sm font-medium text-gray-900">
                        ‡ß≥{customer.previousDue}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-sm font-medium text-orange-600">
                        ‡ß≥{customer.todaysDue}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-sm font-medium text-green-600">
                        ‡ß≥{customer.deposit}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`text-sm font-bold ${
                        customer.totalDue > 0 ? 'text-red-600' : 'text-green-600'
                      }`}>
                        ‡ß≥{customer.totalDue}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm">
                        <div className={`font-medium ${isOverdue ? 'text-red-600' : 'text-gray-900'}`}>
                          {format(new Date(customer.dueDate), 'dd/MM/yyyy')}
                        </div>
                        {isOverdue && (
                          <div className="text-xs text-red-500 font-bengali">
                            {daysOverdue} ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§
                          </div>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setSelectedCustomer(customer.id)}
                          className="text-blue-600 hover:text-blue-900"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button className="text-indigo-600 hover:text-indigo-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => sendReminder(customer.id)}
                          className="text-green-600 hover:text-green-900"
                        >
                          <MessageSquare className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              }) : (
                <tr>
                  <td colSpan={8} className="px-6 py-8 text-center text-gray-500 font-bengali">
                    ‡¶ï‡ßã‡¶® ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Customer Form Modal */}
      {showForm && (
        <DueCustomerForm
          onClose={() => setShowForm(false)}
          onSave={() => setShowForm(false)}
        />
      )}

      {/* Customer Details Modal */}
      {selectedCustomer && (
        <DueCustomerDetails
          customerId={selectedCustomer}
          onClose={() => setSelectedCustomer(null)}
        />
      )}
    </div>
  );
};

export default DueCustomerManager;